buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }

  dependencies {
    classpath('io.sealights.on-premise.agents.plugin:sealights-gradle-plugin:4.0.0-SNAPSHOT')
  }

}

plugins {
  id 'java'
  id 'org.springframework.boot' version '2.7.10'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'jacoco'
}

group = 'i0.sealights.synth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

project.ext["codeCoverageManagerVersion"] = System.getProperty('codeCoverageManagerVersion') == null ? 'v1' : System.getProperty('codeCoverageManagerVersion')
project.ext["enableOtelExtension"] = 'false'
project.ext["anonymousExecution"] = System.getProperty('anonymousExecution') == null ? 'false' : System.getProperty('anonymousExecution')

if (System.getProperty('parallelRun') != null) {
  project.ext["enableOtelExtension"] = 'true'
}

repositories {
  mavenCentral()
}

dependencies {

  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'com.esotericsoftware:reflectasm:1.11.9'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
  implementation 'org.json:json:20230227'


  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
}

tasks.named('test') {
  useJUnitPlatform()

//  if (System.getProperty('parallelRun') != null) {
//    systemProperty 'junit.jupiter.execution.parallel.enabled', true
//    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
//    systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'same_thread'
//  }
//
//  systemProperty 'generatorPackageName', System.getProperty('testRunId') ? System.getProperty('testRunId') : null

  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
}

jacoco {
  toolVersion = "0.8.9"
  reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}


if (System.getProperty('enableSlPlugin') != null) {
  allprojects.each { p ->
    def included = []
    def excluded = []

    if (!included.isEmpty()) {
      println "[SeaLights Integration] Including only projects: ${included}"
    }

    if (!excluded.isEmpty()) {
      println "[SeaLights Integration] Excluding projects: ${excluded}"
    }

    if (!excluded.contains(p.name) &&
        (included.isEmpty() || included.contains(p.name))) {
      println "[SeaLights Integration] SeaLights applied to project: '${p.name}'"
      p.afterEvaluate {
        p.apply plugin: io.sealights.onpremise.agents.plugin.SealightsPlugin
        p.sealights {
//          tokenFile = "mock-token.txt"
          token = "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL0RFVi1ncmVnLmF1dGguc2VhbGlnaHRzLmlvLyIsImp3dGlkIjoiREVWLWdyZWcsaS0wOGFjODQxODlhYWFhZWFkMyxBUElHVy0zM2M0MTY5MS02MTU1LTRhMzktYTU5OC0yZjVkMGE0YTE4NGQsMTY4MjU3NzEwODA1NSIsInN1YmplY3QiOiJTZWFMaWdodHNAYWdlbnQiLCJhdWRpZW5jZSI6WyJhZ2VudHMiXSwieC1zbC1yb2xlIjoiYWdlbnQiLCJ4LXNsLXNlcnZlciI6Imh0dHBzOi8vZGV2LWdyZWctZ3cuZGV2LnNlYWxpZ2h0cy5jby9hcGkiLCJzbF9pbXBlcl9zdWJqZWN0IjoiIiwiaWF0IjoxNjgyNTc3MTA4fQ.ZqDvrmq1mrCPqWNE7p900fImKTnYZmV0ZBkte0aEF0BTDXn7b4wjsBpgvkmeCfZxgd8fSqxmFniqEsLaWNOJ_mQKLpfQP7rKUEJyy629r5Ni-eouh8wxLlCuWPLnkSBLG4gSEy7NUjfPCQT0hzOjSVQ61GJNEaqJ2QxpGihf85RiFwArxA-mIHa8QB1vSgAJfRePlX8foPF2exce43JdJobLYSCsqDv0cmxHHV813TPgxclMVX1R7a20nOJ0GkaMEel3GSXCVhhxbSW2tOK-WgCoOJIypP7RNBUnUU2t2zHh8_FrfpHweIKWOQK22mpKqpGTqc7y7Df0pX7rXXDWs3Fx_ayTBP-PmU2LMlv4tptKwKTtbz9uFkUasWmH27tnMEw06M9mJGecKYPzaGdMDNn2a814XnMKRlbnv2O_Ux8cvHhb2aUX4zqmU_cDCPw4dJY46wFjATkzDN8hwak0R8XXUK1STNW9ksc4gbbXkiuHybs7c7gdo0QiHnClu3KU3Rh_Ml0RScXCVBlXHJF9DXc7UueLI5mGBFfEUxas6zYQvft4QElj4caPIOYOI7Ss-vgjAJ1lQHqKcWZPBf_5hRK16woiAdix6oag1aR5EYeUZ4IQV5pshyxIhg3I4bJr3oZok_JBWa4LuRoa1Q7_f_09aR6-LQ8nlGxLbd5nCdQ"
          appName = "testGroupId"
          createExecutionId = true
          createBuildSessionId = true
          build = "jpmorgan_007"
          branch = "develop"
//          buildSessionId = "3091dd6d-2206-4b2d-a165-89761ebd3c01"
//				filesIncluded = "*.class"
//				filesExcluded = "*test-classes*"
          packagesIncluded = "*sealights.synth.app.*"
          recursive = true
          includeResources = true
          testStage = "SynthTest"
          runFunctionalTests = false
          runTestOnly = false
          logEnabled = true
          logPluginMinimal = false
          logToConsole = true
          logLevel = "DEBUG"
//        "sl.featuresData.enablePerThreadCoverage": "false"
          sealightsJvmParams = ["sl.classLoadersExcluded": "com.esotericsoftware.reflectasm.*", "sl.testGroupId":"xxTGI", "sl.featuresData.codeCoverageManagerVersion": p.ext["codeCoverageManagerVersion"], "sl.otel.enabled": p.ext["enableOtelExtension"], "sl.anonymousExecution": project.ext["anonymousExecution"], "sl.otelConfiguration.loadEmbeddedAgent": "true", "sl.footprintsCollectIntervalSecs": "2", "sl.footprintsSendIntervalSecs": "4"]
          testListenerJar = "C:\\projekty\\agents\\java-agent-bootstrapper-4.0.0-SNAPSHOT.jar"
          buildScannerJar = "C:\\projekty\\agents\\java-build-agent-4.0.0-SNAPSHOT.jar"
        }
      }
    }
  }
}
//includeBuild('../sl-synth-gradle')