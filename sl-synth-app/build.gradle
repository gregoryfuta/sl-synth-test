buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.sealights.on-premise.agents.plugin:sealights-gradle-plugin:4.0.819')
    }
}

buildscript {
  repositories {
    mavenCentral()
  }
}

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }
}

plugins {
  id 'java'
  id 'org.springframework.boot' version '2.7.10'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'jacoco'
}

group = 'i0.sealights.synth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

project.ext["codeCoverageManagerVersion"] = System.getProperty('codeCoverageManagerVersion') == null ? 'v1' : System.getProperty('codeCoverageManagerVersion')
project.ext["enableOtelExtension"] = 'false'
project.ext["anonymousExecution"] = System.getProperty('anonymousExecution') == null ? 'false' : System.getProperty('anonymousExecution')

if (System.getProperty('parallelRun') != null) {
  project.ext["enableOtelExtension"] = 'true'
}

repositories {
  mavenCentral()
}

dependencies {

  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'com.esotericsoftware:reflectasm:1.11.9'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
  implementation 'org.json:json:20230227'


  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
}

tasks.named('test') {
  useJUnitPlatform()

//  systemProperty 'generatorPackageName', System.getProperty('testRunId') ? System.getProperty('testRunId') : null

}

allprojects.each { p ->
    def included = []
    def excluded = []

    if (!included.isEmpty()) {
        println "[SeaLights Integration] Including only projects: ${included}"
    }

    if (!excluded.isEmpty()) {
        println "[SeaLights Integration] Excluding projects: ${excluded}"
    }

    if (!excluded.contains(p.name) &&
            (included.isEmpty() || included.contains(p.name))) {
        println "[SeaLights Integration] SeaLights applied to project: '${p.name}'"

        p.afterEvaluate {

            p.apply plugin: io.sealights.onpremise.agents.plugin.SealightsPlugin
            p.sealights {

token="eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL0RFVi1ncmVnLmF1dGguc2VhbGlnaHRzLmlvLyIsImp3dGlkIjoiREVWLWdyZWcsaS0wOGFjODQxODlhYWFhZWFkMyxBUElHVy0zM2M0MTY5MS02MTU1LTRhMzktYTU5OC0yZjVkMGE0YTE4NGQsMTY4MjU3NzEwODA1NSIsInN1YmplY3QiOiJTZWFMaWdodHNAYWdlbnQiLCJhdWRpZW5jZSI6WyJhZ2VudHMiXSwieC1zbC1yb2xlIjoiYWdlbnQiLCJ4LXNsLXNlcnZlciI6Imh0dHBzOi8vZGV2LWdyZWctZ3cuZGV2LnNlYWxpZ2h0cy5jby9hcGkiLCJzbF9pbXBlcl9zdWJqZWN0IjoiIiwiaWF0IjoxNjgyNTc3MTA4fQ.ZqDvrmq1mrCPqWNE7p900fImKTnYZmV0ZBkte0aEF0BTDXn7b4wjsBpgvkmeCfZxgd8fSqxmFniqEsLaWNOJ_mQKLpfQP7rKUEJyy629r5Ni-eouh8wxLlCuWPLnkSBLG4gSEy7NUjfPCQT0hzOjSVQ61GJNEaqJ2QxpGihf85RiFwArxA-mIHa8QB1vSgAJfRePlX8foPF2exce43JdJobLYSCsqDv0cmxHHV813TPgxclMVX1R7a20nOJ0GkaMEel3GSXCVhhxbSW2tOK-WgCoOJIypP7RNBUnUU2t2zHh8_FrfpHweIKWOQK22mpKqpGTqc7y7Df0pX7rXXDWs3Fx_ayTBP-PmU2LMlv4tptKwKTtbz9uFkUasWmH27tnMEw06M9mJGecKYPzaGdMDNn2a814XnMKRlbnv2O_Ux8cvHhb2aUX4zqmU_cDCPw4dJY46wFjATkzDN8hwak0R8XXUK1STNW9ksc4gbbXkiuHybs7c7gdo0QiHnClu3KU3Rh_Ml0RScXCVBlXHJF9DXc7UueLI5mGBFfEUxas6zYQvft4QElj4caPIOYOI7Ss-vgjAJ1lQHqKcWZPBf_5hRK16woiAdix6oag1aR5EYeUZ4IQV5pshyxIhg3I4bJr3oZok_JBWa4LuRoa1Q7_f_09aR6-LQ8nlGxLbd5nCdQ"
recursive=true
includeResources=true
runFunctionalTests=true
runTestOnly=true
filesStorage="/tmp"
logEnabled=true
logPluginMinimal=false
logLevel="debug"
createBuildSessionId=false
buildSessionIdFile="buildSessionId.txt"
createPRBuildSessionId=false
testListenerJvmParams=["sl.tags" : "cucumber"]
testTasksAndStages=["runBDDs" : "NewComponent Tests"]
logToFile=false
logToConsole=true

            }
        }
    }
}
